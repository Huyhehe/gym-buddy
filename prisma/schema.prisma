// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String          @id @default(cuid())
    name          String?
    email         String?         @unique
    emailVerified DateTime?
    image         String?
    isAdmin       Boolean         @default(false)
    accounts      Account[]
    sessions      Session[]
    UserWorkout   UserWorkout[]
    trainingGoal  String?
    caloriesNeed  Int?
    height        Float?
    weight        Float?
    age           Int?
    WorkoutRecord WorkoutRecord[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Exercise {
    id                   String                 @id @default(cuid())
    name                 String                 @unique
    sets                 Int
    reps                 Int
    repsUnit             String
    difficulty           Int
    mechanic             String                 @default("compound")
    equipmentId          String
    Equipment            Equipment              @relation(fields: [equipmentId], references: [id])
    goal                 String
    force                String?
    ExerciseStep         ExerciseStep[]
    ExerciseExample      ExerciseExample[]
    ExerciseMuscleTarget ExerciseMuscleTarget[]
    Workout              Workout?               @relation(fields: [workoutId], references: [id])
    workoutId            String?
    WorkoutExerciseStep  WorkoutExerciseStep[]
    caloriesBurned       Int                    @default(0)
}

model ExerciseStep {
    id          String   @id @default(cuid())
    index       Int
    description String
    exercise    Exercise @relation(fields: [exerciseId], references: [id])
    exerciseId  String
}

model ExerciseExample {
    id         String   @id @default(cuid())
    index      Int
    mediaURL   String
    gender     Boolean
    exercise   Exercise @relation(fields: [exerciseId], references: [id])
    exerciseId String
}

model ExerciseMuscleTarget {
    id          String   @id @default(cuid())
    name        String
    side        String
    affectLevel Int      @default(0)
    exercise    Exercise @relation(fields: [exerciseId], references: [id])
    exerciseId  String
}

model Equipment {
    id          String     @id @default(cuid())
    name        String
    description String
    icon        String
    Exercise    Exercise[]
}

model Workout {
    id                  String                @id @default(cuid())
    title               String
    level               Int
    target              String
    description         String
    thumbnail           String
    isAdminCreated      Boolean               @default(false)
    exercises           Exercise[]
    WorkoutExerciseStep WorkoutExerciseStep[]
    UserWorkout         UserWorkout[]
}

model WorkoutExerciseStep {
    id         String   @id @default(cuid())
    index      Int
    exercise   Exercise @relation(fields: [exerciseId], references: [id])
    exerciseId String
    workout    Workout  @relation(fields: [workoutId], references: [id])
    workoutId  String
}

model UserWorkout {
    id            String          @id @default(cuid())
    user          User            @relation(fields: [userId], references: [id])
    userId        String
    workout       Workout         @relation(fields: [workoutId], references: [id])
    workoutId     String
    completed     Boolean         @default(false)
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    trainingTimes Int             @default(0)
    WorkoutRecord WorkoutRecord[]
}

model WorkoutRecord {
    id            String      @id @default(cuid())
    user          User        @relation(fields: [userId], references: [id])
    userId        String
    userWorkout   UserWorkout @relation(fields: [userWorkoutId], references: [id])
    userWorkoutId String
    createdAt     DateTime    @default(now())
}
